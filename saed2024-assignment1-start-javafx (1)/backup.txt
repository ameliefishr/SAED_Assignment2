/* MyParser.java */
/* Generated By:JavaCC: Do not edit this line. MyParser.java */
package edu.curtin.saed.assignment1;

import edu.curtin.saed.assignment1.*;
import java.util.*;
import java.io.*;

public class MyParser implements MyParserConstants {
    public static void main(String[] args) throws ParseException {
        String inputFile = "input_test.dsl";
        try {
            FileReader fr = new FileReader(inputFile);
            MyParser parser = new MyParser(fr);
            Game game = new Game(null, null, null, null);
            parser.start(game);

            System.out.println("Parsing completed successfully.");
            System.out.println("Grid size: " + game.getGridWidth() + "x" + game.getGridHeight());
            System.out.println("Player start: " + game.getPlayerStartLocation().getX() + "," + game.getPlayerStartLocation().getY());
            System.out.println("Goal location: " + game.getGoalLocation().getX() + "," + game.getGoalLocation().getY());

            for (Item item : game.getItems()) {
                System.out.println("Item: " + item.getName() + ", Message: " + item.getMessage());
                for (Location loc : item.getLocations()) {
                    System.out.println("  Location: " + loc.getX() + ", " + loc.getY());
                }
            }

            for (Obstacle obstacle : game.getObstacles()) {
                System.out.println("Obstacle requires: " + obstacle.getRequiredItems());
                System.out.println("Located at: " + obstacle.getLocation());
            }

        } catch (FileNotFoundException e) {
            System.err.println("File not found: " + inputFile);
        } catch (IOException e) {
            System.err.println("IO error while reading the file.");
        }
    }

  static final public void start(Game game) throws ParseException {
    sizeDeclaration(game);
    startDeclaration(game);
    goalDeclaration(game);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ITEM:
      case OBSTACLE:
      case PLUGIN:
      case SCRIPT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ITEM:{
        itemDeclaration(game);
        break;
        }
      case OBSTACLE:{
        obstacleDeclaration(game);
        break;
        }
      case PLUGIN:{
        pluginDeclaration(game);
        break;
        }
      case SCRIPT:{
        scriptDeclaration(game);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
}

  static final public void sizeDeclaration(Game game) throws ParseException {int width, height;
    jj_consume_token(SIZE);
    jj_consume_token(LPAREN);
    width = number();
    jj_consume_token(COMMA);
    height = number();
    jj_consume_token(RPAREN);
game.setGridSize(width, height);
}

  static final public void startDeclaration(Game game) throws ParseException {int x, y;
    jj_consume_token(START);
    jj_consume_token(LPAREN);
    x = number();
    jj_consume_token(COMMA);
    y = number();
    jj_consume_token(RPAREN);
game.setPlayerStartLocation(new Location(x, y));
}

  static final public void goalDeclaration(Game game) throws ParseException {int x, y;
    jj_consume_token(GOAL);
    jj_consume_token(LPAREN);
    x = number();
    jj_consume_token(COMMA);
    y = number();
    jj_consume_token(RPAREN);
game.setGoalLocation(new Location(x, y));
}

  static final public void itemDeclaration(Game game) throws ParseException {String itemName;
    List<Location> locList;
    String message;
    jj_consume_token(ITEM);
    itemName = string();
    jj_consume_token(LCURLY);
    locList = atDeclaration();
    jj_consume_token(MESSAGE);
    message = string();
    jj_consume_token(RCURLY);
game.addItem(new Item(itemName, locList, message));
}

  static final public void obstacleDeclaration(Game game) throws ParseException {List<Location> locList;
    List<Item> requiredItems;
    jj_consume_token(OBSTACLE);
    jj_consume_token(LCURLY);
    locList = atDeclaration();
    requiredItems = requiresDeclaration();
    jj_consume_token(RCURLY);
game.addObstacle(new Obstacle(locList, "Obstacle", requiredItems));
}

  static final public void pluginDeclaration(Game game) throws ParseException {String pluginName;
    jj_consume_token(PLUGIN);
    pluginName = qualifiedName();
game.addPlugin(new Plugin(pluginName));
}

  static final public void scriptDeclaration(Game game) throws ParseException {String scriptContent;
    jj_consume_token(SCRIPT);
    jj_consume_token(EXCLAMATION_LCURLY);
    scriptContent = scriptContent();
    jj_consume_token(RCURLY);
game.addScript(new Script(scriptContent));
}

  static final public List<Location> atDeclaration() throws ParseException {List<Location> locList = new ArrayList<Location>();
    Location loc;
    jj_consume_token(AT);
    jj_consume_token(LPAREN);
    loc = location();
locList.add(loc);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      loc = location();
locList.add(loc);
    }
    jj_consume_token(RPAREN);
{if ("" != null) return locList;}
    throw new Error("Missing return statement in function");
}

  static final public Location location() throws ParseException {int row, col;
    jj_consume_token(LPAREN);
    row = number();
    jj_consume_token(COMMA);
    col = number();
    jj_consume_token(RPAREN);
{if ("" != null) return new Location(row, col);}
    throw new Error("Missing return statement in function");
}

static final public List<Item> requiresDeclaration() throws ParseException {
  List<Item> requiredItems = new ArrayList<Item>();
  String itemName;
  jj_consume_token(REQUIRES);
  itemName = string();
  requiredItems.add(new Item(itemName, null, itemName)); // Assuming you have an Item constructor that accepts the item name

  label_3:
  while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA: {
              break;
          }
          default:
              jj_la1[3] = jj_gen;
              break label_3;
      }
      jj_consume_token(COMMA);
      itemName = string();
      requiredItems.add(new Item(itemName, null, itemName)); // Add each item to the list
  }
  return requiredItems;
}

static final public String scriptContent() throws ParseException {
  StringBuilder sb = new StringBuilder();
  while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case TEXT: {
              Token token = jj_consume_token(TEXT);
              sb.append(token.image); // Append captured content
              break;
          }
          default:
              jj_la1[4] = jj_gen;
              return sb.toString(); // Exit if no more TEXT tokens
      }
  }
}

  static final public int number() throws ParseException {Token t;
    t = jj_consume_token(NUMBER);
{if ("" != null) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
}

  static final public String string() throws ParseException {Token t;
    t = jj_consume_token(STRING);
{if ("" != null) return t.image.substring(1, t.image.length() - 1);}
    throw new Error("Missing return statement in function");
}

  static final public String qualifiedName() throws ParseException {Token t;
    StringBuilder sb = new StringBuilder();
    t = jj_consume_token(IDENTIFIER);
sb.append(t.image);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
sb.append(".").append(t.image);
    }
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xf00,0xf00,0x20000,0x20000,0x2000000,0x200000,};
	}

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MyParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MyParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MyParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[27];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 6; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 27; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
