PARSER_BEGIN(MyParser)

package edu.curtin.saed.assignment1;

import edu.curtin.saed.assignment1.MyParserTokenManager;
import edu.curtin.saed.assignment1.Token;
import edu.curtin.saed.assignment1.SimpleCharStream;
import edu.curtin.saed.assignment1.ParseException;

import java.util.*; 
import java.io.*; 
import java.io.FileNotFoundException; 

public class MyParser {
    public static int rows;
    public static int cols;
    public static int startRow;
    public static int startCol;
    public static int goalRow;
    public static int goalCol;
    public static String name;
    public static List<String> coordinates = new ArrayList<>();
    public static String message;
    public static Game game; // game instance

    public static void parseFile(InputStream inputStream) throws ParseException, FileNotFoundException {
        MyParser parser = new MyParser(inputStream);
        MyParser.StartupDeclarations(); 
        initializeGame();
    }


    private static void initializeGame() {
        Location playerLocation = new Location(startRow, startCol); 
        Location goalLocation = new Location(goalRow, goalCol);
        game = new Game(playerLocation, goalLocation, new ArrayList<>(), new ArrayList<>());

        System.out.println("Game Initialized:");
        System.out.println("Player Start Location: " + playerLocation.toString());
        System.out.println("Goal Location: " + goalLocation.toString());
    }
}

PARSER_END(MyParser)

SKIP : {
    " " | "\t" | "\r" | "\n" 
}

TOKEN : {
    <SIZE: "size"> |
    <START: "start"> |
    <GOAL: "goal"> |
    <ITEM: "item"> |
    <AT: "at"> |
    <MESSAGE: "message"> |
    <LPAREN: "("> |
    <RPAREN: ")"> |
    <LBRACE: "{"> |
    <RBRACE: "}"> |
    <COMMA: ","> |
    <STRING_LITERAL: "\"" (~["\""])* "\"" > |
    <NUMBER: (["0"-"9"])+> 
}

void StartupDeclarations() : 
{ 
} 
{
    SizeDeclaration() 
    StartDeclaration() 
    GoalDeclaration()
    ItemDeclaration()
}

void SizeDeclaration() : 
{
    Token rowToken;
    Token colToken;
} 
{
    <SIZE> <LPAREN> rowToken = <NUMBER> <COMMA> colToken = <NUMBER> <RPAREN>
    {
        rows = Integer.parseInt(rowToken.image);
        cols = Integer.parseInt(colToken.image);
        if (rows < 1 || cols < 1) {
            throw new ParseException("Invalid size values. Must be at least 1.");
        }
    }
}

void StartDeclaration() : 
{
    Token startRowToken;
    Token startColToken;
} 
{
    <START> <LPAREN> startRowToken = <NUMBER> <COMMA> startColToken = <NUMBER> <RPAREN>
    {
        startRow = Integer.parseInt(startRowToken.image);
        startCol = Integer.parseInt(startColToken.image);
        if (startRow < 0 || startRow >= rows || startCol < 0 || startCol >= cols) {
            throw new ParseException("Invalid start location. Must be within grid bounds.");
        }
    }
}

void GoalDeclaration() : 
{
    Token goalRowToken;
    Token goalColToken;
} 
{
    <GOAL> <LPAREN> goalRowToken = <NUMBER> <COMMA> goalColToken = <NUMBER> <RPAREN>
    {
        goalRow = Integer.parseInt(goalRowToken.image);
        goalCol = Integer.parseInt(goalColToken.image);
        if (goalRow < 0 || goalRow >= rows || goalCol < 0 || goalCol >= cols) {
            throw new ParseException("Invalid goal location. Must be within grid bounds.");
        }
    }
}

void ItemDeclaration() : 
{
    Token nameToken; 
    List<String> locList = new ArrayList<>();
} 
{
    <ITEM> nameToken = <STRING_LITERAL> <LBRACE> AtDeclaration(locList) MessageDeclaration() <RBRACE>
    {
        name = nameToken.image.substring(1, nameToken.image.length() - 1); 
        coordinates = locList; 
    }
}

// list of coordinates
void AtDeclaration(List<String> locList) : 
{
} 
{
    <AT> CoordinateList(locList)
}

// parse list of coordinates (allow multiple pairs)
void CoordinateList(List<String> locList) : 
{
} 
{
    Coordinate(locList) ( <COMMA> Coordinate(locList) )*
}

// parse individual coordinates 
void Coordinate(List<String> locList) : 
{
    Token x; 
    Token y;
} 
{
    <LPAREN> x = <NUMBER> <COMMA> y = <NUMBER> <RPAREN>
    {
        locList.add("(" + x.image + "," + y.image + ")"); 
    }
}

// handle message declaration
void MessageDeclaration() : 
{
    Token messageToken;
} 
{
    <MESSAGE> messageToken = <STRING_LITERAL> 
    {
        message = messageToken.image.substring(1, messageToken.image.length() - 1); 
    }
}