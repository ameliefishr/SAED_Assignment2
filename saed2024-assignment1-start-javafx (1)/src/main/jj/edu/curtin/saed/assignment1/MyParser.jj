PARSER_BEGIN(MyParser)

package edu.curtin.saed.assignment1;

import edu.curtin.saed.assignment1.*;
import java.util.*;
import java.io.*; 
import java.io.FileNotFoundException; 

ublic class MyParser {
    private static int rows; // for size rows
    private static int cols; // for size columns
    private static int startRow; // for start row
    private static int startCol; // for start column
    private static int goalRow; // for goal row
    private static int goalCol; // for goal column
    private static Game game; // game instance

    public static void main(String[] args) throws ParseException, FileNotFoundException {
        FileInputStream fileInputStream = new FileInputStream("input.dsl");
        MyParser parser = new MyParser(fileInputStream);
        parser.StartupDeclarations();
        
        initializeGame();
        
        System.out.println("Parsed Game Variables:");
        System.out.println("Size: " + rows + " x " + cols);
        System.out.println("Start: (" + startRow + "," + startCol + ")");
        System.out.println("Goal: (" + goalRow + "," + goalCol + ")");
    }

    private static void initializeGame() {
        Location playerLocation = new Location(startRow, startCol); 
        Location goalLocation = new Location(goalRow, goalCol);

        game = new Game(playerLocation, goalLocation, new ArrayList<>(), new ArrayList<>());
        
        System.out.println("Game Initialized:");
        System.out.println("Player Start Location: " + playerLocation);
        System.out.println("Goal Location: " + goalLocation);
    }
}

PARSER_END(MyParser)

SKIP : {
    " " | "\t" | "\r" | "\n" // Skip spaces, tabs, and newlines
}

// Token definitions
TOKEN : {
    <SIZE: "size"> |
    <START: "start"> |
    <GOAL: "goal"> |
    <LPAREN: "("> |
    <RPAREN: ")"> |
    <COMMA: ","> |
    <NUMBER: (["0"-"9"])+> // Tokens for numbers
}

// Parser definitions
void StartupDeclarations() : 
{ 
} 
{
    SizeDeclaration() 
    StartDeclaration() 
    GoalDeclaration()
}

// Parse size declaration: size (rows, cols)
void SizeDeclaration() : 
{
    Token rowToken;
    Token colToken;
} 
{
    <SIZE> <LPAREN> rowToken = <NUMBER> <COMMA> colToken = <NUMBER> <RPAREN>
    {
        rows = Integer.parseInt(rowToken.image);
        cols = Integer.parseInt(colToken.image);
        if (rows < 1 || cols < 1) {
            throw new ParseException("Invalid size values. Must be at least 1.");
        }
    }
}

// Parse start declaration: start (startRow, startCol)
void StartDeclaration() : 
{
    Token startRowToken;
    Token startColToken;
} 
{
    <START> <LPAREN> startRowToken = <NUMBER> <COMMA> startColToken = <NUMBER> <RPAREN>
    {
        startRow = Integer.parseInt(startRowToken.image);
        startCol = Integer.parseInt(startColToken.image);
        if (startRow < 0 || startRow >= rows || startCol < 0 || startCol >= cols) {
            throw new ParseException("Invalid start location. Must be within grid bounds.");
        }
    }
}

// Parse goal declaration: goal (goalRow, goalCol)
void GoalDeclaration() : 
{
    Token goalRowToken;
    Token goalColToken;
} 
{
    <GOAL> <LPAREN> goalRowToken = <NUMBER> <COMMA> goalColToken = <NUMBER> <RPAREN>
    {
        goalRow = Integer.parseInt(goalRowToken.image);
        goalCol = Integer.parseInt(goalColToken.image);
        if (goalRow < 0 || goalRow >= rows || goalCol < 0 || goalCol >= cols) {
            throw new ParseException("Invalid goal location. Must be within grid bounds.");
        }
    }
}
