/* MyParser.java */
/* Generated By:JavaCC: Do not edit this line. MyParser.java */
package edu.curtin.saed.assignment1;

import edu.curtin.saed.assignment1.MyParserTokenManager;
import edu.curtin.saed.assignment1.Token;
import edu.curtin.saed.assignment1.SimpleCharStream;
import edu.curtin.saed.assignment1.ParseException;

import java.util.*;
import java.io.*;

public class MyParser implements MyParserConstants {
    // class variables 
    public static int rows;
    public static int cols;
    public static int startRow;
    public static int startCol;
    public static int goalRow;
    public static int goalCol;
    public static String name;
    public static List<String> coordinates = new ArrayList<>();
    public static String message;
    public static Game game; // game instance

    // lists to store plugins, items, scripts and obstacles
    private static List<Item> items = new ArrayList<>();
    private static List<Obstacle> obstacles = new ArrayList<>();
    private static List<String> plugins = new ArrayList<>();
    private static List<String> scripts = new ArrayList<>();

    // function to parse the input file
    public static void parseFile(FileReader fileReader) throws ParseException, FileNotFoundException {

        MyParser parser = new MyParser(fileReader);

        MyParser.StartupDeclarations();
        game.setGridWidth(rows);
        game.setGridHeight(cols);

        // printing for parser debugging <- REMOVE FOR FINAL SUBMISSION
        System.out.println("Parsed Game Variables:");
        System.out.println("Size: " + rows + " x " + cols);
        System.out.println("Start: (" + startRow + "," + startCol + ")");
        System.out.println("Goal: (" + goalRow + "," + goalCol + ")");
        System.out.println("Parsed Item: " + name);
        System.out.println("Coordinates: " + coordinates);
        System.out.println("Message: " + message);
        System.out.println("Items: " + items);
        System.out.println("Obstacles: " + obstacles);
        System.out.println("Plugins: " + plugins);
        System.out.println("Scripts: " + scripts);
    }

    private static void initializeGame() {
        Location playerLocation = new Location(startRow, startCol);
        Location goalLocation = new Location(goalRow, goalCol);

        // majority of the variables in game are empty to start, will be populated later on
        game = new Game(playerLocation, goalLocation, new ArrayList<>(), new ArrayList<>());

        // print for debugging <- REMOVE FOR SUBMISSIOn
        System.out.println("Game Initialized:");
        System.out.println("Player Start Location: " + playerLocation.toString());
        System.out.println("Goal Location: " + goalLocation.toString());
    }

    // parses coordinate string into an int array of x and y coords so can be made into location object
    private static int[] parseCoordinates(String coordStr) {
        String[] parts = coordStr.split(",");
        int x = Integer.parseInt(parts[0].trim());
        int y = Integer.parseInt(parts[1].trim());
        return new int[]{x, y};
    }

// only call AFTER ininitalizeGame or game will be null
    public static Game getGameInstance() {
        return game;
    }

// statup declarations, defines the structure & order of which to parse the input file
  static final public void StartupDeclarations() throws ParseException {
    SizeDeclaration();
    StartDeclaration();
    GoalDeclaration();
initializeGame();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ITEM:
      case OBSTACLE:
      case PLUGIN:
      case SCRIPT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ITEM:{
        ItemDeclaration();
        break;
        }
      case OBSTACLE:{
        ObstacleDeclaration();
        break;
        }
      case PLUGIN:{
        PluginDeclarations();
        break;
        }
      case SCRIPT:{
        ScriptDeclarations();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

// game size declaration
  static final public void SizeDeclaration() throws ParseException {Token rowToken;
    Token colToken;
    jj_consume_token(SIZE);
    jj_consume_token(LPAREN);
    rowToken = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    colToken = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
rows = Integer.parseInt(rowToken.image);
        cols = Integer.parseInt(colToken.image);

        if (rows < 1 || cols < 1) {
            {if (true) throw new ParseException("Invalid size values. Must be at least 1.");}
        }
}

// start location declaration
  static final public void StartDeclaration() throws ParseException {Token startRowToken;
    Token startColToken;
    jj_consume_token(START);
    jj_consume_token(LPAREN);
    startRowToken = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    startColToken = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
startRow = Integer.parseInt(startRowToken.image);
        startCol = Integer.parseInt(startColToken.image);
        if (startRow < 0 || startRow >= rows || startCol < 0 || startCol >= cols) {
            {if (true) throw new ParseException("Invalid start location. Must be within grid bounds.");}
        }
}

// goal location declaration
  static final public void GoalDeclaration() throws ParseException {Token goalRowToken;
    Token goalColToken;
    jj_consume_token(GOAL);
    jj_consume_token(LPAREN);
    goalRowToken = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    goalColToken = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
goalRow = Integer.parseInt(goalRowToken.image);
        goalCol = Integer.parseInt(goalColToken.image);
        if (goalRow < 0 || goalRow >= rows || goalCol < 0 || goalCol >= cols) {
            {if (true) throw new ParseException("Invalid goal location. Must be within grid bounds.");}
        }
}

// item declaration
  static final public void ItemDeclaration() throws ParseException {Token nameToken;
    List<Location> locList = new ArrayList<>();
    jj_consume_token(ITEM);
    nameToken = jj_consume_token(STRING_LITERAL);
    jj_consume_token(LBRACE);
    AtDeclaration(locList);
    MessageDeclaration();
    jj_consume_token(RBRACE);
name = nameToken.image.substring(1, nameToken.image.length() - 1);

        List<Location> itemLocations = new ArrayList<>(locList);

        Item item = new Item(name, itemLocations, message);
        items.add(item);
        game.addItem(item);
}

// obstacle declaration
  static final public void ObstacleDeclaration() throws ParseException {List<Location> locList = new ArrayList<>();
    List<Item> requiredItems = new ArrayList<>();
    jj_consume_token(OBSTACLE);
    jj_consume_token(LBRACE);
    AtDeclaration(locList);
    RequiresDeclaration(requiredItems);
    jj_consume_token(RBRACE);
Location obstacleLocation = locList.get(0);
        List<Location> obstacleLocations = new ArrayList<>();
        obstacleLocations.add(obstacleLocation);
        Obstacle obstacle = new Obstacle(obstacleLocations, requiredItems);
        obstacles.add(obstacle);
        game.addObstacle(obstacle);
}

// plugin declaration
  static final public void PluginDeclarations() throws ParseException {Token pluginName;
    jj_consume_token(PLUGIN);
    QualifiedName();

}

// used in plugin declaration
  static final public void QualifiedName() throws ParseException {Token part;
    StringBuilder qualifiedName = new StringBuilder();
    part = jj_consume_token(IDENTIFIER);
qualifiedName.append(part.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(DOT);
      part = jj_consume_token(IDENTIFIER);
qualifiedName.append("." + part.image);
    }
plugins.add("Plugin: " + qualifiedName.toString());
}

// script declaration
  static final public void ScriptDeclarations() throws ParseException {Token scriptName;
    jj_consume_token(SCRIPT);
    jj_consume_token(EXCLAMATION);
    jj_consume_token(LBRACE);
    ScriptBlock();
    jj_consume_token(RBRACE);

}

// script block declaration - used in script declaration
  static final public void ScriptBlock() throws ParseException {
    jj_consume_token(CLASS);
    ClassDeclaration();
}

// class declaration - used in script declaration
  static final public void ClassDeclaration() throws ParseException {Token className, superClass;
    className = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    QualifiedNameScript();
    jj_consume_token(RPAREN);
    jj_consume_token(COLON);
    MethodDeclaration();
scripts.add("Class: " + className.image);
}

// qualified name for script declaration (differs to the one for plugin)
  static final public void QualifiedNameScript() throws ParseException {Token part;
    part = jj_consume_token(IDENTIFIER);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(DOT);
      part = jj_consume_token(IDENTIFIER);
    }
scripts.add("Superclass: " + part.image);
}

// method declaration - used by script declaration
  static final public void MethodDeclaration() throws ParseException {Token methodName;
    methodName = jj_consume_token(DEF);
    jj_consume_token(HANDLEEVENT);
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(RPAREN);
    jj_consume_token(COLON);
    StatementBlock();
scripts.add("Method: " + methodName.image);
}

// single coordinate pair
  static final public void Coordinate(List<Location> locList) throws ParseException {Token x;
    Token y;
    jj_consume_token(LPAREN);
    x = jj_consume_token(NUMBER);
    jj_consume_token(COMMA);
    y = jj_consume_token(NUMBER);
    jj_consume_token(RPAREN);
locList.add(new Location(Integer.parseInt(x.image), Integer.parseInt(y.image)));
}

// at declaration (proceeds list of locations)
  static final public void AtDeclaration(List<Location> locList) throws ParseException {
    jj_consume_token(AT);
    CoordinateList(locList);
}

// list of coordinate pairs 
  static final public void CoordinateList(List<Location> locList) throws ParseException {
    Coordinate(locList);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      Coordinate(locList);
    }
}

// message declaration
  static final public void MessageDeclaration() throws ParseException {Token msgToken;
    jj_consume_token(MESSAGE);
    msgToken = jj_consume_token(STRING_LITERAL);
message = msgToken.image.substring(1, msgToken.image.length() - 1);
}

// statement block declaration
  static final public void StatementBlock() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    jj_consume_token(RPAREN);
scripts.add("Statement: print(api.getSomeInfo())");
}

// requires declaration (for required items) - used by obstacle declaration
  static final public void RequiresDeclaration(List<Item> requiredItems) throws ParseException {Token itemToken;
    List<String> tempItems = new ArrayList<>();
    jj_consume_token(REQUIRES);
    itemToken = jj_consume_token(STRING_LITERAL);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      itemToken = jj_consume_token(STRING_LITERAL);
    }
tempItems.add(itemToken.image);

        for (String item : tempItems) {
            String itemName = item.substring(1, item.length() - 1); // 1, -1 to remove the "" quotes
            requiredItems.add(new Item(itemName, new ArrayList<Location>(), "Some String"));
        }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x6900,0x6900,0x100000,0x100000,0x2000000,0x2000000,};
	}

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MyParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MyParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MyParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[30];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 6; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 30; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
